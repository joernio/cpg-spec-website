{"schemas":[{"name":"MetaData","description":"\nThe MetaData Layer is provided by the frontend and may be modified\nmodified by passes.\n","providedByFrontend":true},{"name":"FileSystem","description":"\n","providedByFrontend":false},{"name":"Namespace","description":"\n","providedByFrontend":false},{"name":"Method","description":"\n Structural layer (namespace blocks, method declarations, and type declarations).\n This layer is provided by the frontend and may be modified by passes.\n","providedByFrontend":true},{"name":"Type","description":"\n Type layer (local).\n","providedByFrontend":true},{"name":"Ast","description":"\nAbstract syntax tree layer.\n","providedByFrontend":true},{"name":"Cfg","description":"\n","providedByFrontend":false},{"name":"Pdg","description":"\n","providedByFrontend":false},{"name":"CallGraph","description":"\n","providedByFrontend":false},{"name":"Dominators","description":"\n","providedByFrontend":false},{"name":"Comment","description":"\n","providedByFrontend":true},{"name":"Closure","description":"\n\n","providedByFrontend":false},{"name":"Finding","description":"\n\n","providedByFrontend":false},{"name":"Shortcuts","description":"\nShortcut edges calculated by the backend.\nThese edges should NOT be created by the language frontend.\n","providedByFrontend":false},{"name":"TagsAndLocation","description":"\n\n","providedByFrontend":false},{"name":"Base","description":"\n","providedByFrontend":true}],"nodes":[{"name":"META_DATA","comment":"Node to save meta data about the graph on its properties.\nExactly one node of this type per graph","extends":[],"inheritedProperties":[],"properties":["HASH","LANGUAGE","OVERLAYS","VERSION"],"schema":"MetaData","schemaIndex":2,"isAbstract":false},{"name":"FILE","comment":"Node representing a source file - the root of the AST.\nCode property graphs are created from sets of files.\nInformation about these files is stored in the graph to enable queries to map nodes\nof the graph back to the files that contain the code they represent.\nFor each file, the graph must contain exactly one File.\nAs file nodes are root nodes of abstract syntax tress, they are AstNodes and their\norder field is set to 0.\n\nEach code property graph must contain a special file node with name set to\n\"<unknown>\". This node is a placeholder used in cases where a file cannot be\ndetermined at compile time. As an example, consider the case where an external\ntype is introduced only at link time.\nConceptually file nodes serve as indices, e.g., they map all filenames to the\nlist of methods they contain.\n\nFile nodes MUST NOT be created by the language frontend. Instead, the language\nfrontend is assumed to fill out the FILENAME field wherever possible,\nallowing File nodes to be created automatically when the semantic CPG layer is created.","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["HASH","NAME"],"schema":"FileSystem","schemaIndex":3,"isAbstract":false},{"name":"NAMESPACE","comment":"This node represents a namespace as a whole whereas the NAMESPACE_BLOCK is used\nfor each grouping occurrence of a namespace in code.\nSingle representing NAMESPACE node is required for easier navigation in\nthe query language.","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["NAME"],"schema":"Namespace","schemaIndex":4,"isAbstract":false},{"name":"NAMESPACE_BLOCK","comment":"A reference to a namespace.\nWe borrow the concept of a \"namespace block\" from C++, that is, a namespace block\nis a block of code that has been placed in the same namespace by a programmer.\nThis block may be introduced via a `package` statement in Java or\na `namespace{ }` statement in C++.","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["FILENAME","FULL_NAME","NAME"],"schema":"Namespace","schemaIndex":4,"isAbstract":false},{"name":"BINDING","comment":"A binding of a METHOD into a TYPE_DECL","extends":[],"inheritedProperties":[],"properties":["IS_METHOD_NEVER_OVERRIDDEN","NAME","SIGNATURE"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"LOCAL","comment":"A local variable","extends":["LOCAL_LIKE","AST_NODE","DECLARATION"],"inheritedProperties":[{"baseType":"DECLARATION","name":"NAME"},{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["CLOSURE_BINDING_ID","COLUMN_NUMBER","LINE_NUMBER","TYPE_FULL_NAME"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"METHOD","comment":"A method/function/procedure","extends":["CFG_NODE","AST_NODE","DECLARATION"],"inheritedProperties":[{"baseType":"DECLARATION","name":"NAME"},{"baseType":"CFG_NODE","name":"COLUMN_NUMBER"},{"baseType":"AST_NODE","name":"ORDER"},{"baseType":"AST_NODE","name":"CODE"},{"baseType":"CFG_NODE","name":"LINE_NUMBER"}],"properties":["AST_PARENT_FULL_NAME","AST_PARENT_TYPE","COLUMN_NUMBER_END","FILENAME","FULL_NAME","HASH","IS_EXTERNAL","LINE_NUMBER_END","SIGNATURE"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"METHOD_PARAMETER_IN","comment":"This node represents a formal parameter going towards the callee side","extends":["LOCAL_LIKE","AST_NODE","TRACKING_POINT","DECLARATION"],"inheritedProperties":[{"baseType":"DECLARATION","name":"NAME"},{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["COLUMN_NUMBER","EVALUATION_STRATEGY","LINE_NUMBER","TYPE_FULL_NAME"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"METHOD_PARAMETER_OUT","comment":"This node represents a formal output parameter. It does not need to be created by the frontend.","extends":["AST_NODE","TRACKING_POINT","DECLARATION"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"},{"baseType":"DECLARATION","name":"NAME"}],"properties":["COLUMN_NUMBER","EVALUATION_STRATEGY","LINE_NUMBER","TYPE_FULL_NAME"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"METHOD_RETURN","comment":"A formal method return","extends":["CFG_NODE","TRACKING_POINT"],"inheritedProperties":[{"baseType":"CFG_NODE","name":"CODE"},{"baseType":"CFG_NODE","name":"COLUMN_NUMBER"},{"baseType":"CFG_NODE","name":"LINE_NUMBER"},{"baseType":"CFG_NODE","name":"ORDER"}],"properties":["EVALUATION_STRATEGY","TYPE_FULL_NAME"],"schema":"Method","schemaIndex":5,"isAbstract":false},{"name":"MEMBER","comment":"Member of a class struct or union","extends":["AST_NODE","DECLARATION"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"},{"baseType":"DECLARATION","name":"NAME"}],"properties":["TYPE_FULL_NAME"],"schema":"Type","schemaIndex":6,"isAbstract":false},{"name":"TYPE","comment":"A type which always has to reference a type declaration and may have type\nargument children if the referred to type declaration is a template","extends":[],"inheritedProperties":[],"properties":["FULL_NAME","NAME","TYPE_DECL_FULL_NAME"],"schema":"Type","schemaIndex":6,"isAbstract":false},{"name":"TYPE_ARGUMENT","comment":"Argument for a TYPE_PARAMETER that belongs to a TYPE. It binds another\nTYPE to a TYPE_PARAMETER","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":[],"schema":"Type","schemaIndex":6,"isAbstract":false},{"name":"TYPE_DECL","comment":"A type declaration","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["ALIAS_TYPE_FULL_NAME","AST_PARENT_FULL_NAME","AST_PARENT_TYPE","FILENAME","FULL_NAME","INHERITS_FROM_TYPE_FULL_NAME","IS_EXTERNAL","NAME"],"schema":"Type","schemaIndex":6,"isAbstract":false},{"name":"TYPE_PARAMETER","comment":"Type parameter of TYPE_DECL or METHOD","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["NAME"],"schema":"Type","schemaIndex":6,"isAbstract":false},{"name":"AST_NODE","comment":"Base type for all nodes are (in particular) nodes of the abstract syntax tree.\nIn a syntax tree, sibling nodes (nodes who share a parent node) are ordered.\nAs some graph databases do not guarantee the order in which siblings are returned to\nbe stable, we make the ordering explicit by storing the position of each node relative\nto its siblings in the order field. In the left most sibling, order is set to 0,\nwhile in the right-most sibling, it is set to n-1 where n is the number of siblings.","extends":[],"inheritedProperties":[],"properties":["CODE","ORDER"],"schema":"Ast","schemaIndex":7,"isAbstract":true},{"name":"BLOCK","comment":"A compound statement. Compound statements are used in many languages to allow\ngrouping a sequence of statements. For example, in C and Java, compound statements\nare statements enclosed by curly braces. Function/Method bodies are compound\nstatements. We do not use the term \"compound statement\" because \"statement\" would\nimply that the block does not yield a value upon evaluation, that is, that it is\nnot an expression. This is true in languages such as C and Java, but not for languages\nsuch as Scala where the value of the block is given by that of the last expression it\ncontains. In fact, the Scala grammar uses the term \\\"BlockExpr\\\" (short for\n\\\"block expression\\\") to describe what in the CPG spec we just call \\\"Block\\\".","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"CALL","comment":"A (function/method) call. The `methodFullName` property is the name of the\ninvoked method (the callee) while the `typeFullName` is its return type, and\ntherefore, the return type of the call when viewing it as an expression. For\nlanguages like Javascript, it is common that we may know the (short-) name\nof the invoked method, but we do not know at compile time which method\nwill actually be invoked, e.g., because it depends on a dynamic import.\nIn this case, we leave `methodFullName` blank but at least fill out `name`,\nwhich contains the method's (short-) name and `signature`, which contains\nany information we may have about the types of arguments and return value.","extends":["CALL_REPR","EXPRESSION"],"inheritedProperties":[{"baseType":"CALL_REPR","name":"NAME"},{"baseType":"CALL_REPR","name":"SIGNATURE"},{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["DISPATCH_TYPE","METHOD_FULL_NAME","TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"CALL_REPR","comment":"A base class for nodes that represent different types of calls","extends":["CFG_NODE"],"inheritedProperties":[{"baseType":"CFG_NODE","name":"CODE"},{"baseType":"CFG_NODE","name":"COLUMN_NUMBER"},{"baseType":"CFG_NODE","name":"LINE_NUMBER"},{"baseType":"CFG_NODE","name":"ORDER"}],"properties":["NAME","SIGNATURE"],"schema":"Ast","schemaIndex":7,"isAbstract":true},{"name":"CONTROL_STRUCTURE","comment":"A control structure such as if, while, or for","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["CONTROL_STRUCTURE_TYPE","PARSER_TYPE_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"EXPRESSION","comment":"Expression as a specialisation of tracking point","extends":["CFG_NODE","AST_NODE","TRACKING_POINT"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"CFG_NODE","name":"COLUMN_NUMBER"},{"baseType":"CFG_NODE","name":"LINE_NUMBER"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["ARGUMENT_INDEX"],"schema":"Ast","schemaIndex":7,"isAbstract":true},{"name":"FIELD_IDENTIFIER","comment":"A node that represents which field is accessed in a <operator>.fieldAccess, in\ne.g. obj.field. The CODE part is used for human display and matching to MEMBER nodes.\nThe CANONICAL_NAME is used for dataflow tracking; typically both coincide.\nHowever, suppose that two fields foo and bar are a C-style union; then CODE refers\nto whatever the programmer wrote (obj.foo or obj.bar), but both share the same\nCANONICAL_NAME (e.g. GENERATED_foo_bar)","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["CANONICAL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"IDENTIFIER","comment":"An arbitrary identifier/reference","extends":["LOCAL_LIKE","EXPRESSION"],"inheritedProperties":[{"baseType":"LOCAL_LIKE","name":"NAME"},{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"IMPLICIT_CALL","comment":"An implicit call site hidden in a method indicated by METHOD_MAP policy entries","extends":["TRACKING_POINT","CALL_REPR"],"inheritedProperties":[{"baseType":"CALL_REPR","name":"NAME"},{"baseType":"CALL_REPR","name":"SIGNATURE"},{"baseType":"CALL_REPR","name":"COLUMN_NUMBER"},{"baseType":"CALL_REPR","name":"ORDER"},{"baseType":"CALL_REPR","name":"CODE"},{"baseType":"CALL_REPR","name":"LINE_NUMBER"}],"properties":[],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"JUMP_TARGET","comment":"A jump target made explicit in the code using a label","extends":["CFG_NODE","AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"CFG_NODE","name":"COLUMN_NUMBER"},{"baseType":"CFG_NODE","name":"LINE_NUMBER"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["ARGUMENT_INDEX","NAME","PARSER_TYPE_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"LITERAL","comment":"Literal/Constant","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"METHOD_INST","comment":"A method instance which always has to reference a method and may have type\nargument children if the referred to method is a template","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["FULL_NAME","METHOD_FULL_NAME","NAME","SIGNATURE"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"METHOD_REF","comment":"Reference to a method instance","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["METHOD_FULL_NAME","TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"MODIFIER","comment":"A modifier, e.g., static, public, private","extends":["AST_NODE"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["MODIFIER_TYPE"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"POST_EXECUTION_CALL","comment":"Indicates the existence of a call executed on a return value or out parameter of a method after this method has been executed. This is used to model framework code calling functors returned from user code. The outgoing REF edge indicates on which returned entitity the call will happen.","extends":["TRACKING_POINT","CALL_REPR"],"inheritedProperties":[{"baseType":"CALL_REPR","name":"NAME"},{"baseType":"CALL_REPR","name":"SIGNATURE"},{"baseType":"CALL_REPR","name":"COLUMN_NUMBER"},{"baseType":"CALL_REPR","name":"ORDER"},{"baseType":"CALL_REPR","name":"CODE"},{"baseType":"CALL_REPR","name":"LINE_NUMBER"}],"properties":[],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"RETURN","comment":"A return instruction","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":[],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"TYPE_REF","comment":"Reference to a type/class","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"UNKNOWN","comment":"A language-specific node","extends":["EXPRESSION"],"inheritedProperties":[{"baseType":"EXPRESSION","name":"COLUMN_NUMBER"},{"baseType":"EXPRESSION","name":"ARGUMENT_INDEX"},{"baseType":"EXPRESSION","name":"ORDER"},{"baseType":"EXPRESSION","name":"CODE"},{"baseType":"EXPRESSION","name":"LINE_NUMBER"}],"properties":["CONTAINED_REF","PARSER_TYPE_NAME","TYPE_FULL_NAME"],"schema":"Ast","schemaIndex":7,"isAbstract":false},{"name":"CFG_NODE","comment":"Any node that can occur as part of a control flow graph","extends":["AST_NODE","WITHIN_METHOD"],"inheritedProperties":[{"baseType":"AST_NODE","name":"CODE"},{"baseType":"AST_NODE","name":"ORDER"}],"properties":["COLUMN_NUMBER","LINE_NUMBER"],"schema":"Cfg","schemaIndex":8,"isAbstract":true},{"name":"COMMENT","comment":"A source code comment","extends":[],"inheritedProperties":[],"properties":["CODE","FILENAME","LINE_NUMBER"],"schema":"Comment","schemaIndex":12,"isAbstract":false},{"name":"CLOSURE_BINDING","comment":"Represents the binding of a LOCAL or METHOD_PARAMETER_IN into the closure of a method","extends":[],"inheritedProperties":[],"properties":["CLOSURE_BINDING_ID","CLOSURE_ORIGINAL_NAME","EVALUATION_STRATEGY"],"schema":"Closure","schemaIndex":13,"isAbstract":false},{"name":"FINDING","extends":[],"inheritedProperties":[],"properties":[],"schema":"Finding","schemaIndex":14,"isAbstract":false},{"name":"KEY_VALUE_PAIR","extends":[],"inheritedProperties":[],"properties":["KEY","VALUE"],"schema":"Finding","schemaIndex":14,"isAbstract":false},{"name":"LOCATION","extends":[],"inheritedProperties":[],"properties":["CLASS_NAME","CLASS_SHORT_NAME","FILENAME","LINE_NUMBER","METHOD_FULL_NAME","METHOD_SHORT_NAME","NODE_LABEL","PACKAGE_NAME","SYMBOL"],"schema":"TagsAndLocation","schemaIndex":16,"isAbstract":false},{"name":"SINK","extends":[],"inheritedProperties":[],"properties":["SINK_TYPE"],"schema":"TagsAndLocation","schemaIndex":16,"isAbstract":false},{"name":"SOURCE","extends":[],"inheritedProperties":[],"properties":["SOURCE_TYPE"],"schema":"TagsAndLocation","schemaIndex":16,"isAbstract":false},{"name":"TAG","comment":"A string tag","extends":[],"inheritedProperties":[],"properties":["NAME","VALUE"],"schema":"TagsAndLocation","schemaIndex":16,"isAbstract":false},{"name":"TAG_NODE_PAIR","extends":[],"inheritedProperties":[],"properties":[],"schema":"TagsAndLocation","schemaIndex":16,"isAbstract":false},{"name":"DECLARATION","extends":[],"inheritedProperties":[],"properties":["NAME"],"schema":"Base","schemaIndex":2147483647,"isAbstract":true},{"name":"LOCAL_LIKE","comment":"Formal input parameters, locals, and identifiers","extends":[],"inheritedProperties":[],"properties":["NAME"],"schema":"Base","schemaIndex":2147483647,"isAbstract":true},{"name":"TRACKING_POINT","comment":"Any node that can occur in a data flow","extends":["WITHIN_METHOD"],"inheritedProperties":[],"properties":[],"schema":"Base","schemaIndex":2147483647,"isAbstract":true},{"name":"WITHIN_METHOD","comment":"Any node that can exist in a method","extends":[],"inheritedProperties":[],"properties":[],"schema":"Base","schemaIndex":2147483647,"isAbstract":true}],"edges":[{"name":"ALIAS_OF","comment":"Alias relation between types. Created by backend passes.","schema":"Type"},{"name":"ARGUMENT","comment":"Relation between a CALL and its arguments and RETURN and the returned expression","schema":"CallGraph"},{"name":"AST","comment":"Syntax tree edge","schema":"Ast"},{"name":"BINDS","comment":"Relation between TYPE_DECL and BINDING node","schema":"Method"},{"name":"BINDS_TO","comment":"Type argument binding to a type parameter","schema":"Type"},{"name":"CALL","schema":"CallGraph"},{"name":"CAPTURE","comment":"Represents the capturing of a variable into a closure","schema":"Closure"},{"name":"CAPTURED_BY","comment":"Connection between a captured LOCAL and the corresponding CLOSURE_BINDING","schema":"Closure"},{"name":"CDG","comment":"Control dependency graph","schema":"Pdg"},{"name":"CFG","comment":"Control flow edge","schema":"Cfg"},{"name":"CONDITION","comment":"Edge from control structure node to the expression that holds the condition","schema":"Ast"},{"name":"CONTAINS","comment":"Shortcut over multiple AST edges","schema":"Shortcuts"},{"name":"DOMINATE","comment":"Points to dominated node in DOM tree","schema":"Dominators"},{"name":"EVAL_TYPE","comment":"Link to evaluation type","schema":"Shortcuts"},{"name":"INHERITS_FROM","comment":"Inheritance relation between types","schema":"Type"},{"name":"PARAMETER_LINK","comment":"Links together corresponding METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes. Created by backend.","schema":"Method"},{"name":"POST_DOMINATE","comment":"Points to dominated node in post DOM tree","schema":"Dominators"},{"name":"REACHING_DEF","comment":"Reaching definition edge","schema":"Pdg"},{"name":"RECEIVER","comment":"The receiver of a method call which is either an object or a pointer","schema":"CallGraph"},{"name":"REF","comment":"A reference to e.g. a LOCAL","schema":"Base"},{"name":"SOURCE_FILE","comment":"Source file of a node, in which its LINE_NUMBER and COLUMN_NUMBER are valid","schema":"FileSystem"},{"name":"TAGGED_BY","comment":"Edges from nodes to tags","schema":"TagsAndLocation"},{"name":"TYPE_DECL_ALIAS","comment":"Alias relation between two TYPE_DECL","schema":"Type"},{"name":"VTABLE","comment":"Indicates that a method is part of the vtable of a certain type declaration","schema":"Method"}],"properties":[{"name":"ALIAS_TYPE_FULL_NAME","comment":"Type full name of which a TYPE_DECL is an alias of","schema":"Type"},{"name":"ARGUMENT_INDEX","comment":"AST-children of CALL nodes have an argument index, that is used to match\ncall-site arguments with callee parameters. Explicit parameters are numbered\nfrom 1 to N, while index 0 is reserved for implicit self / this parameter.\nCALLs without implicit parameter therefore have arguments starting with index 1.\nAST-children of BLOCK nodes may have an argument index as well; in this case,\nthe last argument index determines the return-value of a BLOCK expression","schema":"CallGraph"},{"name":"AST_PARENT_FULL_NAME","comment":"The FULL_NAME of a the AST parent of an entity","schema":"Base"},{"name":"AST_PARENT_TYPE","comment":"The type of the AST parent. Since this is only used in some parts of the graph,\nthe list does not include all possible parents by intention.\nPossible parents: METHOD, TYPE_DECL, NAMESPACE_BLOCK.","schema":"Base"},{"name":"CANONICAL_NAME","comment":"Canonical token of a FIELD_IDENTIFIER. Typically identical to the CODE field,\nbut canonicalized according to source language semantics. Human readable names\nare preferable. FIELD_IDENTIFIERs must share identical CANONICAL_NAME if and\nonly if they alias, e.g. in C-style unions (if the aliasing relationship is\nunknown or there are partial overlaps, then one must make a reasonable guess,\nand trade off between false negatives and false positives)","schema":"Ast"},{"name":"CLASS_NAME","schema":"TagsAndLocation"},{"name":"CLASS_SHORT_NAME","schema":"TagsAndLocation"},{"name":"CLOSURE_BINDING_ID","comment":"Identifier which uniquely describes a CLOSURE_BINDING. This property is used to match captured LOCAL nodes with the corresponding CLOSURE_BINDING nodes","schema":"Closure"},{"name":"CLOSURE_ORIGINAL_NAME","comment":"The original name of the (potentially mangled) captured variable","schema":"Closure"},{"name":"CODE","comment":"The code snippet the node represents","schema":"Base"},{"name":"COLUMN_NUMBER","comment":"Column where the code starts","schema":"Base"},{"name":"COLUMN_NUMBER_END","comment":"Column where the code ends","schema":"Method"},{"name":"CONTAINED_REF","comment":"References to other nodes. This is not a real property; it exists here for the sake of proto serialization only. valueType and cardinality are meaningless.","schema":"ProtoSerialize"},{"name":"CONTROL_STRUCTURE_TYPE","comment":"Indicates the control structure type. See controlStructureTypes","schema":"Ast"},{"name":"DISPATCH_TYPE","comment":"The dispatch type of a call, which is either static or dynamic. See dispatchTypes","schema":"CallGraph"},{"name":"EVALUATION_STRATEGY","comment":"Evaluation strategy for function parameters and return values. One of the values in \"evaluationStrategies\"","schema":"CallGraph"},{"name":"FILENAME","comment":"Full path of canonical file that contained this node; will be linked into\ncorresponding FILE nodes. Possible for METHOD, TYPE_DECL and NAMESPACE_BLOCK","schema":"Base"},{"name":"FULL_NAME","comment":"Full name of an element, e.g., the class name along, including its package\n(e.g. \\\"io.shiftleft.dataflowenging.layers.dataflows.DataFlowRunner.run\\\").\nIn theory, the FULL_NAME just needs to be unique and is used for linking references,\nso a consecutive integer would be valid. In practice, this should be human readable","schema":"Base"},{"name":"HASH","comment":"Hash value. Used, for example, to store the hash of the\nartifact that this CPG is built from","schema":"Base"},{"name":"INHERITS_FROM_TYPE_FULL_NAME","comment":"The static types a TYPE_DECL inherits from. This property is matched against the\nFULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node\nfor each TYPE_FULL_NAME","schema":"Type"},{"name":"IS_EXTERNAL","comment":"Indicates that the construct (METHOD or TYPE_DECL) is external, that is,\nit is referenced but not defined in the code (applies both to insular\nparsing and to library functions where we have header files only)","schema":"Base"},{"name":"IS_METHOD_NEVER_OVERRIDDEN","comment":"True if the referenced method is never overridden by the subclasses and false otherwise. This can be left blank by the frontend.","schema":"Method"},{"name":"KEY","schema":"Finding"},{"name":"LANGUAGE","comment":"the CPG language frontend that generated this CPG","schema":"MetaData"},{"name":"LINE_NUMBER","comment":"Line where the code starts","schema":"Base"},{"name":"LINE_NUMBER_END","comment":"Line where the code ends","schema":"Method"},{"name":"METHOD_FULL_NAME","comment":"The FULL_NAME of a method. Used to link CALL and METHOD nodes. It is required\nto have exactly one METHOD node for each METHOD_FULL_NAME","schema":"Ast"},{"name":"METHOD_SHORT_NAME","schema":"TagsAndLocation"},{"name":"MODIFIER_TYPE","comment":"Indicates the modifier which is represented by a MODIFIER node. See modifierTypes","schema":"Ast"},{"name":"NAME","comment":"Name of represented object, e.g., method name (e.g. \"run\")","schema":"Base"},{"name":"NODE_LABEL","schema":"TagsAndLocation"},{"name":"ORDER","comment":"General ordering property, such that the children of each AST-node are\ntypically numbered from 1, ..., N (this is not enforced).","schema":"Base"},{"name":"OVERLAYS","comment":"Names of overlays applied to this graph, in order of application","schema":"MetaData"},{"name":"PACKAGE_NAME","schema":"TagsAndLocation"},{"name":"PARSER_TYPE_NAME","comment":"AST node type name emitted by parser.","schema":"Base"},{"name":"SIGNATURE","comment":"Method signature. The format is defined by the language front-end, and the\nbackend simply compares strings to resolve function overloading, i.e. match\ncall-sites to METHODs. In theory, consecutive integers would be valid,\nbut in practice this should be human readable","schema":"Method"},{"name":"SINK_TYPE","schema":"TagsAndLocation"},{"name":"SOURCE_TYPE","schema":"TagsAndLocation"},{"name":"SYMBOL","schema":"TagsAndLocation"},{"name":"TYPE_DECL_FULL_NAME","comment":"The static type decl of a TYPE. This property is matched against the FULL_NAME\nof TYPE_DECL nodes. It is required to have exactly one TYPE_DECL for each\ndifferent TYPE_DECL_FULL_NAME","schema":"Type"},{"name":"TYPE_FULL_NAME","comment":"The static type of an entity. E.g. expressions, local, parameters etc.\nThis property is matched against the FULL_NAME of TYPE nodes and thus it\nis required to have at least one TYPE node for each TYPE_FULL_NAME","schema":"Type"},{"name":"VALUE","comment":"Generic node property","schema":"Base"},{"name":"VARIABLE","comment":"A variable propagated by a reaching-def edge","schema":"Pdg"},{"name":"VERSION","comment":"A version, given as a string. Used, for example, in the META_DATA node to\nindicate which version of the CPG spec this CPG conforms to","schema":"Base"}]}